/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IOrderMixin {
  export type OrderStruct = {
    salt: BigNumberish;
    maker: BigNumberish;
    receiver: BigNumberish;
    makerAsset: BigNumberish;
    takerAsset: BigNumberish;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    makerTraits: BigNumberish;
  };

  export type OrderStructOutput = [
    salt: bigint,
    maker: bigint,
    receiver: bigint,
    makerAsset: bigint,
    takerAsset: bigint,
    makingAmount: bigint,
    takingAmount: bigint,
    makerTraits: bigint
  ] & {
    salt: bigint;
    maker: bigint;
    receiver: bigint;
    makerAsset: bigint;
    takerAsset: bigint;
    makingAmount: bigint;
    takingAmount: bigint;
    makerTraits: bigint;
  };
}

export interface LimitOrderProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "advanceEpoch"
      | "and"
      | "arbitraryStaticCall"
      | "bitInvalidatorForOrder"
      | "bitsInvalidateForOrder"
      | "cancelOrder"
      | "cancelOrders"
      | "checkPredicate"
      | "eip712Domain"
      | "epoch"
      | "epochEquals"
      | "eq"
      | "fillContractOrder"
      | "fillContractOrderArgs"
      | "fillOrder"
      | "fillOrderArgs"
      | "gt"
      | "hashOrder"
      | "increaseEpoch"
      | "lt"
      | "not"
      | "or"
      | "owner"
      | "paused"
      | "permitAndCall"
      | "rawRemainingInvalidatorForOrder"
      | "remainingInvalidatorForOrder"
      | "renounceOwnership"
      | "simulate"
      | "transferOwnership"
      | "DOMAIN_SEPARATOR"
      | "pause"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BitInvalidatorUpdated"
      | "EIP712DomainChanged"
      | "EpochIncreased"
      | "OrderCancelled"
      | "OrderFilled"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "and",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitraryStaticCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bitInvalidatorForOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bitsInvalidateForOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPredicate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochEquals",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eq",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fillContractOrder",
    values: [IOrderMixin.OrderStruct, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillContractOrderArgs",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderArgs",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gt",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [IOrderMixin.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lt",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "not", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "or",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitAndCall",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawRemainingInvalidatorForOrder",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingInvalidatorForOrder",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simulate",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "and", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitraryStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitsInvalidateForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPredicate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillContractOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillContractOrderArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "not", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "or", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawRemainingInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BitInvalidatorUpdatedEvent {
  export type InputTuple = [
    maker: AddressLike,
    slotIndex: BigNumberish,
    slotValue: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    slotIndex: bigint,
    slotValue: bigint
  ];
  export interface OutputObject {
    maker: string;
    slotIndex: bigint;
    slotValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochIncreasedEvent {
  export type InputTuple = [
    maker: AddressLike,
    series: BigNumberish,
    newEpoch: BigNumberish
  ];
  export type OutputTuple = [maker: string, series: bigint, newEpoch: bigint];
  export interface OutputObject {
    maker: string;
    series: bigint;
    newEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [orderHash: BytesLike];
  export type OutputTuple = [orderHash: string];
  export interface OutputObject {
    orderHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    remainingAmount: BigNumberish
  ];
  export type OutputTuple = [orderHash: string, remainingAmount: bigint];
  export interface OutputObject {
    orderHash: string;
    remainingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LimitOrderProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): LimitOrderProtocol;
  waitForDeployment(): Promise<this>;

  interface: LimitOrderProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Advances nonce by specified amount
   */
  advanceEpoch: TypedContractMethod<
    [series: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Calls every target with corresponding data
   */
  and: TypedContractMethod<
    [offsets: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * Performs an arbitrary call to target with data
   */
  arbitraryStaticCall: TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [bigint],
    "view"
  >;

  /**
   * See {IOrderMixin-bitInvalidatorForOrder}.
   */
  bitInvalidatorForOrder: TypedContractMethod<
    [maker: AddressLike, slot: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * See {IOrderMixin-bitsInvalidateForOrder}.
   */
  bitsInvalidateForOrder: TypedContractMethod<
    [makerTraits: BigNumberish, additionalMask: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * See {IOrderMixin-cancelOrder}.
   */
  cancelOrder: TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * See {IOrderMixin-cancelOrders}.
   */
  cancelOrders: TypedContractMethod<
    [makerTraits: BigNumberish[], orderHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  /**
   * See {IOrderMixin-checkPredicate}.
   */
  checkPredicate: TypedContractMethod<
    [predicate: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.
   */
  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  /**
   * Returns nonce for `maker` and `series`
   */
  epoch: TypedContractMethod<
    [maker: AddressLike, series: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * Checks if `maker` has specified `makerEpoch` for `series`
   */
  epochEquals: TypedContractMethod<
    [maker: AddressLike, series: BigNumberish, makerEpoch: BigNumberish],
    [boolean],
    "view"
  >;

  /**
   * Calls target with specified data and tests if it's equal to the value
   * @param value Value to test
   */
  eq: TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;

  fillContractOrder: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [[bigint, bigint, string]],
    "nonpayable"
  >;

  fillContractOrderArgs: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [[bigint, bigint, string]],
    "nonpayable"
  >;

  fillOrder: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [[bigint, bigint, string]],
    "payable"
  >;

  fillOrderArgs: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [[bigint, bigint, string]],
    "payable"
  >;

  /**
   * Calls target with specified data and tests if it's bigger than value
   * @param value Value to test
   */
  gt: TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;

  hashOrder: TypedContractMethod<
    [order: IOrderMixin.OrderStruct],
    [string],
    "view"
  >;

  /**
   * Advances nonce by one
   */
  increaseEpoch: TypedContractMethod<
    [series: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Calls target with specified data and tests if it's lower than value
   * @param value Value to test
   */
  lt: TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * Calls target with specified data and tests if it's equal to 0
   */
  not: TypedContractMethod<[data: BytesLike], [boolean], "view">;

  /**
   * Calls every target with corresponding data
   */
  or: TypedContractMethod<
    [offsets: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;

  /**
   * Returns the address of the current owner.
   */
  owner: TypedContractMethod<[], [string], "view">;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused: TypedContractMethod<[], [boolean], "view">;

  /**
   * Executes a permit for an ERC20 token and then a specified action in a single transaction.
   * @param action The data representing the action to be executed after the permit.
   * @param permit ERC20 token address (20 bytes) concatenated with the permit data, allowing this contract to spend the token. Format: [token address (20 bytes)][permit data]
   */
  permitAndCall: TypedContractMethod<
    [permit: BytesLike, action: BytesLike],
    [void],
    "payable"
  >;

  /**
   * See {IOrderMixin-rawRemainingInvalidatorForOrder}.
   */
  rawRemainingInvalidatorForOrder: TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;

  /**
   * See {IOrderMixin-remainingInvalidatorForOrder}.
   */
  remainingInvalidatorForOrder: TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * See {IOrderMixin-simulate}.
   */
  simulate: TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the domain separator for the current chain (EIP-712)
   */
  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  /**
   * Pauses all the trading functionality in the contract.
   */
  pause: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Unpauses all the trading functionality in the contract.
   */
  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "advanceEpoch"
  ): TypedContractMethod<
    [series: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "and"
  ): TypedContractMethod<
    [offsets: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "arbitraryStaticCall"
  ): TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bitInvalidatorForOrder"
  ): TypedContractMethod<
    [maker: AddressLike, slot: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bitsInvalidateForOrder"
  ): TypedContractMethod<
    [makerTraits: BigNumberish, additionalMask: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOrders"
  ): TypedContractMethod<
    [makerTraits: BigNumberish[], orderHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkPredicate"
  ): TypedContractMethod<[predicate: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<
    [maker: AddressLike, series: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochEquals"
  ): TypedContractMethod<
    [maker: AddressLike, series: BigNumberish, makerEpoch: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "eq"
  ): TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "fillContractOrder"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [[bigint, bigint, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillContractOrderArgs"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [[bigint, bigint, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [[bigint, bigint, string]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrderArgs"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [[bigint, bigint, string]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "gt"
  ): TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashOrder"
  ): TypedContractMethod<[order: IOrderMixin.OrderStruct], [string], "view">;
  getFunction(
    nameOrSignature: "increaseEpoch"
  ): TypedContractMethod<[series: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lt"
  ): TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "not"
  ): TypedContractMethod<[data: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "or"
  ): TypedContractMethod<
    [offsets: BigNumberish, data: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "permitAndCall"
  ): TypedContractMethod<
    [permit: BytesLike, action: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rawRemainingInvalidatorForOrder"
  ): TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "remainingInvalidatorForOrder"
  ): TypedContractMethod<
    [maker: AddressLike, orderHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "simulate"
  ): TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BitInvalidatorUpdated"
  ): TypedContractEvent<
    BitInvalidatorUpdatedEvent.InputTuple,
    BitInvalidatorUpdatedEvent.OutputTuple,
    BitInvalidatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EpochIncreased"
  ): TypedContractEvent<
    EpochIncreasedEvent.InputTuple,
    EpochIncreasedEvent.OutputTuple,
    EpochIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BitInvalidatorUpdated(address,uint256,uint256)": TypedContractEvent<
      BitInvalidatorUpdatedEvent.InputTuple,
      BitInvalidatorUpdatedEvent.OutputTuple,
      BitInvalidatorUpdatedEvent.OutputObject
    >;
    BitInvalidatorUpdated: TypedContractEvent<
      BitInvalidatorUpdatedEvent.InputTuple,
      BitInvalidatorUpdatedEvent.OutputTuple,
      BitInvalidatorUpdatedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EpochIncreased(address,uint256,uint256)": TypedContractEvent<
      EpochIncreasedEvent.InputTuple,
      EpochIncreasedEvent.OutputTuple,
      EpochIncreasedEvent.OutputObject
    >;
    EpochIncreased: TypedContractEvent<
      EpochIncreasedEvent.InputTuple,
      EpochIncreasedEvent.OutputTuple,
      EpochIncreasedEvent.OutputObject
    >;

    "OrderCancelled(bytes32)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OrderFilled(bytes32,uint256)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
